[{"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\reportWebVitals.js":"1","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\util\\authProvider.js":"2","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\signup\\Signup.js":"3","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\index.js":"4","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\App.js":"5","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\LoginView.js":"6","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\AdminView.js":"7","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\login\\Login.js":"8","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\user\\userTable.js":"9","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\user\\UserTable.js":"10","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\restaurant\\RestaurantTable.js":"11","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\status\\StatusTable.js":"12","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\product\\ProductTable.js":"13","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\util\\baseQuery.js":"14","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\review\\ReviewTable.js":"15","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\ingredient\\IngredientTable.js":"16","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\order\\OrderTable.js":"17","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\productIngredient\\ProductIngredientTable.js":"18","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\orderProduct\\OrderProductTable.js":"19","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\userRestaurant\\UserRestaurantTable.js":"20","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\userView\\UserView.js":"21","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\userView\\restaurant\\RestaurantTable.js":"22","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\json\\JsonTable.js":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"25"},{"size":1626,"mtime":1612522728966,"results":"26","hashOfConfig":"25"},{"size":1841,"mtime":1612522721300,"results":"27","hashOfConfig":"25"},{"size":1375,"mtime":1612437696835,"results":"28","hashOfConfig":"25"},{"size":897,"mtime":1612470820934,"results":"29","hashOfConfig":"25"},{"size":631,"mtime":1612370321905,"results":"30","hashOfConfig":"25"},{"size":5059,"mtime":1612541584719,"results":"31","hashOfConfig":"25"},{"size":1845,"mtime":1612522704390,"results":"32","hashOfConfig":"25"},{"size":1066,"mtime":1611173968637,"results":"33","hashOfConfig":"25"},{"size":4499,"mtime":1612535489328,"results":"34","hashOfConfig":"25"},{"size":5627,"mtime":1612535463374,"results":"35","hashOfConfig":"25"},{"size":4032,"mtime":1612535463404,"results":"36","hashOfConfig":"25"},{"size":5388,"mtime":1612535463374,"results":"37","hashOfConfig":"25"},{"size":2321,"mtime":1612534804930,"results":"38","hashOfConfig":"25"},{"size":5240,"mtime":1612535463404,"results":"39","hashOfConfig":"25"},{"size":4433,"mtime":1612541923642,"results":"40","hashOfConfig":"25"},{"size":5920,"mtime":1612540343361,"results":"41","hashOfConfig":"25"},{"size":4940,"mtime":1612535463404,"results":"42","hashOfConfig":"25"},{"size":4889,"mtime":1612535463374,"results":"43","hashOfConfig":"25"},{"size":4935,"mtime":1612535433148,"results":"44","hashOfConfig":"25"},{"size":1433,"mtime":1612540239072,"results":"45","hashOfConfig":"25"},{"size":10867,"mtime":1612534185827,"results":"46","hashOfConfig":"25"},{"size":1213,"mtime":1612541175760,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"11pp73o",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\reportWebVitals.js",[],["103","104"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\util\\authProvider.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\signup\\Signup.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\index.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\App.js",["105","106"],"import React from 'react';\r\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.scss';\r\nimport {useAuth, Role, logout} from './util/authProvider'\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport LoginView from './components/login/LoginView';\r\nimport AdminView from './components/adminView/AdminView';\r\nimport UserView from './components/userView/UserView';\r\n\r\n\r\nfunction App() {\r\n    const [logged] = useAuth();\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {!logged && <>\r\n                <LoginView />\r\n            </>}\r\n            {logged && Role.getRole()!==\"admin\" && <>\r\n                <UserView/>\r\n            </>}\r\n            {logged && Role.getRole()===\"admin\" && <>\r\n                <AdminView/>\r\n                \r\n            </>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\LoginView.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\AdminView.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\login\\login\\Login.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\user\\userTable.js",["107"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\user\\UserTable.js",["108","109","110"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\restaurant\\RestaurantTable.js",["111","112","113"],"import {useState, useEffect} from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function RestaurantTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [])\r\n    \r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action,row,e) =>{ \r\n        setFormData(row)\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        if(action == \"Edytuj\"){\r\n            updateItem(formData)\r\n        }\r\n        if(action == \"Dodaj\"){\r\n            addItem(formData)\r\n        }\r\n    }\r\n    \r\n    const getData = () => {\r\n        query.getData(\"/api/restaurant\",alert).then(res=>{\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        query.addItem(\"/api/restaurant\",alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/restaurant/${data.id_restaurant}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/restaurant/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n        <Table responsive striped bordered hover size=\"md\">\r\n            <thead>\r\n                <tr>\r\n                    <th>id</th>\r\n                    <th>Nazwa</th>\r\n                    <th>Adres</th>\r\n                    <th>Latitude</th>\r\n                    <th>Longitude</th>\r\n                    <th>Opis</th>\r\n                    <th>Widoczne dla użytkowników</th>\r\n                    <th>Akcje</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {state.map((row,i)=>(\r\n                    <tr key={i}>\r\n                        <td>{row.id_restaurant}</td>\r\n                        <td>{row.name}</td>\r\n                        <td>{row.address}</td>\r\n                        <td>{row.latitude}</td>\r\n                        <td>{row.longitude}</td>\r\n                        <td>{row.description}</td>\r\n                        <td>{row.publish.toString()}</td>\r\n                        <td>\r\n                        <Button variant=\"primary\" onClick={handleShow.bind(this,\"Edytuj\",row)}>\r\n                            Edytuj\r\n                        </Button>\r\n                        <Button variant=\"danger\" onClick={deleteItem.bind(this,row.id_restaurant)}>\r\n                            Usuń\r\n                        </Button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n        <Button variant=\"success\" onClick={handleShow.bind(this,\"Dodaj\", {})}>\r\n            Dodaj\r\n        </Button>\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n            <Modal.Title>{action}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form >\r\n                    <Form.Group >\r\n                        <Form.Label>Nazwa: </Form.Label>\r\n                        <Form.Control type=\"text\" name=\"name\" value={formData.name} onChange={e => handleInputChange(e)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group >\r\n                        <Form.Label>Adres: </Form.Label>\r\n                        <Form.Control type=\"text\"  name=\"address\"  value={formData.address} onChange={e => handleInputChange(e)} />\r\n                    </Form.Group>\r\n                    <Form.Group >\r\n                        <Form.Label>Latitude: </Form.Label>\r\n                        <Form.Control type=\"text\" name=\"latitude\"  value={formData.latitude} onChange={e =>  handleInputChange(e)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group >\r\n                        <Form.Label>Longitude: </Form.Label>\r\n                        <Form.Control type=\"text\" name=\"longitude\"  value={formData.longitude} onChange={e => handleInputChange(e)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group >\r\n                        <Form.Label>Opis: </Form.Label>\r\n                        <Form.Control type=\"text\" name=\"description\"  value={formData.description} onChange={e => handleInputChange(e)} />\r\n                    </Form.Group>\r\n                    <Form.Group >\r\n                        <Form.Check type=\"checkbox\" name=\"publish\"  label=\"Widoczne dla użytkowników\" checked={formData.publish} onChange={e => handleInputChange(e)} />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n                Anuluj\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleSave}>\r\n                Zapisz\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        \r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\status\\StatusTable.js",["114","115","116"],"import { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function StatusTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action, row, e) => {\r\n        setFormData(row);\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        if (action == \"Edytuj\") {\r\n            updateItem(formData)\r\n        }\r\n        if (action == \"Dodaj\") {\r\n            addItem(formData)\r\n        }\r\n    }\r\n\r\n    const getData = () => {\r\n        query.getData(\"/api/status\",alert).then(res=>{\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        query.addItem(\"/api/status\",alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/status/${data.id_status}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/status/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>Nazwa</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.id_status}</td>\r\n                            <td>{row.name}</td>\r\n                            <td>\r\n                                <Button variant=\"primary\" onClick={handleShow.bind(this, \"Edytuj\", row)}>\r\n                                    Edytuj\r\n                        </Button>\r\n                                <Button variant=\"danger\" onClick={deleteItem.bind(this, row.id_status)}>\r\n                                    Usuń\r\n                        </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Button variant=\"success\" onClick={handleShow.bind(this, \"Dodaj\", {})}>\r\n                Dodaj\r\n        </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>Nazwa: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"name\" value={formData.name} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\product\\ProductTable.js",["117","118","119"],"import { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function ProductTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action, row, e) => {\r\n        setFormData(row);\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        console.log(formData)\r\n        if (action == \"Edytuj\") {\r\n            updateItem(formData)\r\n        }\r\n        if (action == \"Dodaj\") {\r\n            addItem(formData)\r\n        }\r\n    }\r\n\r\n    const getData = () => {\r\n        query.getData(\"/api/product\",alert).then(res=>{\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        console.log(\"/api/product\",data)\r\n        query.addItem(\"/api/product\",alert,data).then(res=>{\r\n            console.log(res)\r\n            getData()\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/product/${data.id_product}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/product/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>Nazwa</th>\r\n                        <th>Cena</th>\r\n                        <th>Opis</th>\r\n                        <th>id restauracji</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.id_product}</td>\r\n                            <td>{row.name}</td>\r\n                            <td>{row.price}</td>\r\n                            <td>{row.description}</td>\r\n                            <td>{row.id_restaurant}</td>\r\n                            <td>\r\n                                <Button variant=\"primary\" onClick={handleShow.bind(this, \"Edytuj\", row)}>\r\n                                    Edytuj\r\n                                </Button>\r\n                                <Button variant=\"danger\" onClick={deleteItem.bind(this, row.id_product)}>\r\n                                    Usuń\r\n                                </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Button variant=\"success\" onClick={handleShow.bind(this, \"Dodaj\", {})}>\r\n                Dodaj\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>Nazwa: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"name\" value={formData.name} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Cena: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"price\" value={formData.price} step=\"0.01\" onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Opis: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"description\" value={formData.description} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Id restauracji: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"id_restaurant\" value={formData.id_restaurant} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\util\\baseQuery.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\review\\ReviewTable.js",["120","121","122"],"import { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function ReviewTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action, row, e) => {\r\n        setFormData(row);\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        if (action == \"Edytuj\") {\r\n            updateItem(formData)\r\n        }\r\n        if (action == \"Dodaj\") {\r\n            addItem(formData)\r\n        }\r\n    }\r\n\r\n    const getData = () => {\r\n        query.getData(\"/api/review\",alert).then(res=>{\r\n            console.log(\"asdf\")\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        query.addItem(\"/api/review\",alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/review/${data.id_review}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/review/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>id użytkownika</th>\r\n                        <th>id restauracji</th>\r\n                        <th>Zawartość</th>\r\n                        <th>Ocena</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.id_review}</td>\r\n                            <td>{row.id_user}</td>\r\n                            <td>{row.id_restaurant}</td>\r\n                            <td>{row.content}</td>\r\n                            <td>{row.rating}</td>\r\n                            <td>\r\n                                <Button variant=\"primary\" onClick={handleShow.bind(this, \"Edytuj\", row)}>\r\n                                    Edytuj\r\n                        </Button>\r\n                                <Button variant=\"danger\" onClick={deleteItem.bind(this, row.id_review)}>\r\n                                    Usuń\r\n                        </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Button variant=\"success\" onClick={handleShow.bind(this, \"Dodaj\", {})}>\r\n                Dodaj\r\n        </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>id użytkownika: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"id_user\" value={formData.id_user} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>id restauracji: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"id_restaurant\" value={formData.id_restaurant} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Zawartość: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"content\" value={formData.content} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Ocena: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"rating\" value={formData.rating} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\ingredient\\IngredientTable.js",["123","124","125"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\order\\OrderTable.js",["126","127","128"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\productIngredient\\ProductIngredientTable.js",["129","130","131"],"import { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function ProductIngredientTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action, row, e) => {\r\n        setFormData(row);\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        if (action == \"Edytuj\") {\r\n            updateItem(formData)\r\n        }\r\n        if (action == \"Dodaj\") {\r\n            addItem(formData)\r\n        }\r\n    }\r\n\r\n    const getData = () => {\r\n        query.getData(\"/api/product-ingredient\",alert).then(res=>{\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        query.addItem(\"/api/product-ingredient\",alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/product-ingredient/${data.id_products_ingredients}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/product-ingredient/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>id składniku</th>\r\n                        <th>id produktu</th>\r\n                        <th>Ilość</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.id_products_ingredients}</td>\r\n                            <td>{row.id_ingredient}</td>\r\n                            <td>{row.id_product}</td>\r\n                            <td>{row.quantity}</td>\r\n                            <td>\r\n                                <Button variant=\"primary\" onClick={handleShow.bind(this, \"Edytuj\", row)}>\r\n                                    Edytuj\r\n                        </Button>\r\n                                <Button variant=\"danger\" onClick={deleteItem.bind(this, row.id_products_ingredients)}>\r\n                                    Usuń\r\n                        </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Button variant=\"success\" onClick={handleShow.bind(this, \"Dodaj\", {})}>\r\n                Dodaj\r\n        </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>id składniku: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"id_ingredient\" value={formData.id_ingredient} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>id produktu: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"id_product\" value={formData.id_product} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Ilość: </Form.Label>\r\n                            <Form.Control type=\"text\" name=\"quantity\" value={formData.quantity} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\orderProduct\\OrderProductTable.js",["132","133","134"],"import { useState, useEffect } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { useAlert } from 'react-alert'\r\nimport * as query from \"../../../util/baseQuery\";\r\n\r\nexport function OrderProductTable() {\r\n    const alert = useAlert();\r\n    const [state, setState] = useState([])\r\n    const [formData, setFormData] = useState({});\r\n    const [show, setShow] = useState(false)\r\n    const [action, setAction] = useState(\"\")\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setFormData(s => {\r\n            return { ...s, [name]: value }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (action, row, e) => {\r\n        setFormData(row);\r\n\r\n        setAction(action);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setShow(false)\r\n        if (action == \"Edytuj\") {\r\n            updateItem(formData)\r\n        }\r\n        if (action == \"Dodaj\") {\r\n            addItem(formData)\r\n        }\r\n    }\r\n\r\n    const getData = () => {\r\n        query.getData(\"/api/order-product\",alert).then(res=>{\r\n            setState(res)\r\n        });\r\n    }\r\n\r\n    const addItem = (data) => {\r\n        query.addItem(\"/api/order-product\",alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const updateItem = (data) => {\r\n        query.updateItem(`/api/order-product/${data.id_orders_products}`,alert,data).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const deleteItem = (id) => {\r\n        query.deleteItem(`/api/order-product/${id}`,alert,{}).then(res=>{\r\n            getData()\r\n        });\r\n    };\r\n\r\n    if(!Array.isArray(state)){\r\n        return (<></>)\r\n    }\r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>id zamówienia</th>\r\n                        <th>id produktu</th>\r\n                        <th>Ilość</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.id_orders_products}</td>\r\n                            <td>{row.id_order}</td>\r\n                            <td>{row.id_product}</td>\r\n                            <td>{row.quantity}</td>\r\n                            <td>\r\n                                <Button variant=\"primary\" onClick={handleShow.bind(this, \"Edytuj\", row)}>\r\n                                    Edytuj\r\n                        </Button>\r\n                                <Button variant=\"danger\" onClick={deleteItem.bind(this, row.id_orders_products)}>\r\n                                    Usuń\r\n                        </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Button variant=\"success\" onClick={handleShow.bind(this, \"Dodaj\", {})}>\r\n                Dodaj\r\n        </Button>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>id zamówienia: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"id_order\" value={formData.id_order} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>id produktu: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"id_product\" value={formData.id_product} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Form.Label>Ilość: </Form.Label>\r\n                            <Form.Control type=\"number\" name=\"quantity\" value={formData.quantity} onChange={e => handleInputChange(e)} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\adminView\\userRestaurant\\UserRestaurantTable.js",["135","136","137"],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\userView\\UserView.js",[],"D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\userView\\restaurant\\RestaurantTable.js",["138","139"],"import { useState, useEffect } from 'react';\r\nimport { Table, Button, Modal, Form } from 'react-bootstrap';\r\nimport { authFetch ,UserId} from '../../../util/authProvider'\r\nimport { useAlert } from 'react-alert'\r\nexport function RestaurantTable() {\r\n    const alert = useAlert()\r\n    const [state, setState] = useState([])\r\n    const [dataRestaurant, setDataRestaurant] = useState({})\r\n    const [opinionRestaurant, setRestaurantOpinions] = useState({})\r\n    const [idRestaurant, setIdRestaurant] = useState(0)\r\n    const [show, setShow] = useState(false);\r\n    const [action, setAction] = useState(\"\");\r\n    const [opinion, setOpinion] = useState(\"\")\r\n    const [rate, setRate] = useState(\"\")\r\n    useEffect(() => {\r\n        getRestaurant();\r\n    }, [])\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (row) => {\r\n        setIdRestaurant(row.id_restaurant)\r\n        setShow(true);\r\n\r\n        setOpinion(row.opinion || \"\")\r\n        setRate(row.rate || \"5\")\r\n    };\r\n    const handleSave = async() => {\r\n        try{\r\n            var res = await ( await authFetch(`/api/review`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({content:opinion, rating:rate, id_user :UserId.getUserId(), id_restaurant:idRestaurant })\r\n            })).json();\r\n            if(res.success){\r\n                alert.success(res.message);\r\n            }else{\r\n                alert.error(JSON.stringify(res.message));\r\n            }\r\n        }catch(err) {\r\n            alert.error(JSON.stringify(err));\r\n        }\r\n        setShow(false)\r\n    }\r\n\r\n    //drugi modal( opinie userów ):\r\n    const [showOpinions, setShowOpinions] = useState(false);\r\n    const handleCloseOp = () => setShowOpinions(false);\r\n    const handleShowOp = (id) => {\r\n        // console.log(id);\r\n        setRestaurantOpinions({})\r\n        authFetch(`/api/restaurant/` + id)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                setRestaurantOpinions(data.res)\r\n            })\r\n        setShowOpinions(true);\r\n    }\r\n\r\n    //trzeci modal (zamówienia):\r\n    const [showOrders, setShowOrders] = useState(false);\r\n    const [address, setAddress] = useState(\"\");\r\n    const handleCloseOr = () => setShowOrders(false);\r\n    const handleShowOr = (row) => {\r\n        // console.log(id);\r\n        setDataRestaurant({});\r\n        setAddress(\"\");\r\n        setIdRestaurant(row.id_restaurant)\r\n        authFetch(`/api/restaurant/` + row.id_restaurant)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                data.res.products.map((item) => {\r\n                    item.quantity = \"0\";\r\n                })\r\n                setDataRestaurant(data.res)\r\n            })\r\n        setShowOrders(true);\r\n    }\r\n    const handleSaveOr = async() => {\r\n        try{\r\n            var res = await ( await authFetch(`/api/order/products`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({id_user: UserId.getUserId(), id_restaurant:idRestaurant, address, products: dataRestaurant.products})\r\n            })).json();\r\n            if(res.success){\r\n                alert.success(res.message);\r\n            }else{\r\n                alert.error(JSON.stringify(res.message));\r\n            }\r\n        }catch(err) {\r\n            alert.error(JSON.stringify(err));\r\n        }\r\n        setShow(false)\r\n        setShowOrders(false)\r\n    }\r\n\r\n \r\n    \r\n\r\n    const getRestaurant = () => {\r\n        authFetch(`/api/restaurant`)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                setState(data.res)\r\n            })\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Table responsive striped bordered hover size=\"md\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nazwa</th>\r\n                        <th>Adres</th>\r\n                        <th>Opis</th>\r\n                        <th>Akcje</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.map((row, i) => (\r\n                        <tr key={i}>\r\n                            <td>{row.name}</td>\r\n                            <td>{row.address}</td>\r\n                            <td>{row.description}</td>\r\n                            <td>\r\n                                <Button variant=\"success\" onClick={handleShow.bind(this, row)}>\r\n                                    Prześlij opinię\r\n                                </Button>\r\n                                <Button variant=\"success\" onClick={handleShowOp.bind(this, row.id_restaurant)}>\r\n                                    Opinie\r\n                                </Button>\r\n                                <Button variant=\"success\" onClick={handleShowOr.bind(this, row)}>\r\n                                    Zamów\r\n                                </Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{action}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>Opinia: </Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={10} value={opinion} onChange={e => setOpinion(e.target.value)} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group >\r\n                            <Form.Check type=\"range\" min=\"0\" max=\"10\" step=\"1\" value={rate} onChange={e => setRate(e.target.value)} />\r\n                            {rate}\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Zapisz\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            {/* opinie  */}\r\n            <Modal show={showOpinions} onHide={handleCloseOp}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Opinie klientów: </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive striped bordered hover size=\"md\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Opinia</th>\r\n                                <th>Ocena</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {opinionRestaurant.reviews ? opinionRestaurant.reviews.map((row, i) => (\r\n                                <tr key={i}>\r\n                                    <td>{row.content}</td>\r\n                                    <td>{row.rating}/10</td>\r\n                                </tr>\r\n                            )) : \"\"}\r\n                        </tbody>\r\n                    </Table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseOp}>\r\n                        Zamknij\r\n            </Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n            {/* zamówienia */}\r\n\r\n            <Modal show={showOrders} onHide={handleCloseOr}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Złóż zamówienie:</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form >\r\n                        <Form.Group >\r\n                            <Form.Label>Adres: </Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Odbiór osobisty\" value={address} onChange={e => setAddress(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <Table responsive striped bordered hover size=\"md\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nazwa</th>\r\n                                <th>Cena</th>\r\n                                <th>Opis</th>\r\n                                <th>Ilość</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {dataRestaurant.products ? dataRestaurant.products.map((row, i) => (\r\n                                <tr key={i}>\r\n                                    <td>{row.name}</td>\r\n                                    <td>{row.price}</td>\r\n                                    <td>{row.description}</td>\r\n                                    <td>\r\n\r\n                                        <Form>\r\n                                            <Form.Group>\r\n\r\n                                                <Form.Control type=\"number\" min=\"0\" max=\"100\" value={row.quantity} onChange={e => setDataRestaurant(s => {\r\n                                                    var tmp = { ...s };\r\n                                                    if (tmp.products[i].quantity > 100) {\r\n                                                        tmp.products[i].quantity = 100;\r\n                                                    }\r\n                                                    else if (tmp.products[i].quantity < 0) {\r\n                                                        tmp.products[i].quantity = 0;\r\n                                                    }\r\n                                                    else {\r\n                                                        tmp.products[i].quantity = e.target.value;\r\n                                                    }\r\n                                                    return tmp;\r\n                                                })} />\r\n                                            </Form.Group>\r\n                                        </Form>\r\n                                    </td>\r\n                                </tr>\r\n                            )) : \"\"}\r\n                        </tbody>\r\n                    </Table>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseOr}>\r\n                        Anuluj\r\n            </Button>\r\n                    <Button variant=\"primary\" onClick={handleSaveOr}>\r\n                        Zamów\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n","D:\\OneDrive - Akademia Górniczo-Hutnicza im. Stanisława Staszica w Krakowie\\Pulpit\\postgres_project\\frontend\\src\\components\\json\\JsonTable.js",["140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":5,"column":24,"nodeType":"147","messageId":"148","endLine":5,"endColumn":30},{"ruleId":"145","severity":1,"message":"149","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":16},{"ruleId":"145","severity":1,"message":"150","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":19,"column":8,"nodeType":"153","endLine":19,"endColumn":10,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":35,"column":19,"nodeType":"157","messageId":"158","endLine":35,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":38,"column":19,"nodeType":"157","messageId":"158","endLine":38,"endColumn":21},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"159"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":19,"nodeType":"157","messageId":"158","endLine":39,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":42,"column":19,"nodeType":"157","messageId":"158","endLine":42,"endColumn":21},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"160"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"161"},{"ruleId":"155","severity":1,"message":"156","line":40,"column":20,"nodeType":"157","messageId":"158","endLine":40,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":43,"column":20,"nodeType":"157","messageId":"158","endLine":43,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"162"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"163"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"164"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"165"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"166"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":26,"column":8,"nodeType":"153","endLine":26,"endColumn":10,"suggestions":"167"},{"ruleId":"155","severity":1,"message":"156","line":39,"column":20,"nodeType":"157","messageId":"158","endLine":39,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":42,"column":20,"nodeType":"157","messageId":"158","endLine":42,"endColumn":22},{"ruleId":"145","severity":1,"message":"168","line":12,"column":20,"nodeType":"147","messageId":"148","endLine":12,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":74,"column":46,"nodeType":"171","messageId":"172","endLine":74,"endColumn":48},{"ruleId":"151","severity":1,"message":"173","line":13,"column":7,"nodeType":"153","endLine":13,"endColumn":15,"suggestions":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'logout' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'authFetch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["177"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["178"],["179"],["180"],["181"],["182"],["183"],["184"],["185"],["186"],"'setAction' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["187"],"no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},{"desc":"188","fix":"191"},{"desc":"188","fix":"192"},{"desc":"188","fix":"193"},{"desc":"188","fix":"194"},{"desc":"188","fix":"195"},{"desc":"188","fix":"196"},{"desc":"188","fix":"197"},{"desc":"188","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [getData]",{"range":"201","text":"202"},{"range":"203","text":"202"},{"range":"204","text":"202"},{"range":"205","text":"202"},{"range":"206","text":"202"},{"range":"207","text":"202"},{"range":"208","text":"202"},{"range":"209","text":"202"},{"range":"210","text":"202"},{"range":"211","text":"202"},"Update the dependencies array to be: [alert, params]",{"range":"212","text":"213"},[676,678],"[getData]",[837,839],[834,836],[836,838],[834,836],[838,840],[833,835],[845,847],[840,842],[842,844],[411,419],"[alert, params]"]